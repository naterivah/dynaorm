/*
 * Copyright 2014 Evoliris.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package be.bitich.dynaorm.test.integration;

import be.bittich.dynaorm.exception.EntityDoesNotExistException;
import static be.bittich.dynaorm.ioc.BasicContainer.getContainer;
import be.bittich.dynaorm.maping.ColumnMapping;
import be.bittich.dynaorm.repository.DynaRepository;
import be.bittich.dynaorm.repository.TableColumn;
import java.awt.BorderLayout;
import java.awt.Frame;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author Evoliris
 * @param <T>
 */
public class EditForm<T> extends javax.swing.JDialog {

    /**
     * Creates new form EditFormCity
     */
    private T t;
    private DynaRepository repo;
    private Map<JLabel, JTextField> mapField = new HashMap();

    public EditForm(T t, DynaRepository repo, Frame parentWindow, boolean exist) {
        super(parentWindow, true);
        initComponents();
        this.t = t;
        this.repo = repo;
        this.butDel.setEnabled(exist);
        setupPanelField();
    }

    private Map<String, Field> getMappedMap() {
        ColumnMapping mapper = getContainer().injectSafely("columnMapping");
        TableColumn tableColumn = repo.getTableColumn();
        Map<String, Field> mappedMap = mapper.mapToSQLColumns(t, tableColumn);
        return mappedMap;
    }

    private void setupPanelField() {

        Map<String, Field> mappedMap = getMappedMap();

        for (String label : mappedMap.keySet()) {
            try {
                Field field = mappedMap.get(label);
                JLabel jLabel = new JLabel(label);
                Object value= field.get(t);
                JTextField jTextField = new JTextField(value==null?"":value.toString());
                JPanel _panel = new JPanel(new BorderLayout());
                
                _panel.add(jLabel, BorderLayout.WEST);    
                _panel.add(jTextField, BorderLayout.EAST);
                _panel.setVisible(true);
                panel.add(_panel);
                mapField.put(jLabel, jTextField);
            } catch (IllegalArgumentException | IllegalAccessException ex) {
                Logger.getLogger(EditForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        panel.setVisible(true);
        this.pack();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        butDel = new javax.swing.JButton();
        panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        butDel.setText("Delete");
        butDel.setEnabled(false);
        butDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 155, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(58, Short.MAX_VALUE)
                .addComponent(butDel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(57, 57, 57))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(butDel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Map<String, Field> mappedMap = getMappedMap();
        Set<JLabel> listLabel = mapField.keySet();
        for (JLabel jl : listLabel) {
            String l = jl.getText();
            String value = mapField.get(jl).getText();
            Field field = mappedMap.get(l);
            Class<?> clazz = field.getType();
            try {
                field.set(t, clazz.cast(value));

            } catch (IllegalArgumentException | IllegalAccessException ex) {
                Logger.getLogger(EditForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        repo.update(t);
        this.dispose();

    }//GEN-LAST:event_jButton1ActionPerformed

    private void butDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDelActionPerformed
        try {
            repo.delete(t);
        } catch (EntityDoesNotExistException ex) {
            JOptionPane.showMessageDialog(this, "Entity does not exist");
            Logger.getLogger(EditForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();

    }//GEN-LAST:event_butDelActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butDel;
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel panel;
    // End of variables declaration//GEN-END:variables
}
